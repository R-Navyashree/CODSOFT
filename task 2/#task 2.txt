#task 2
import math

# Print the Tic-Tac-Toe board
def print_board(board):
    for row in [board[i * 3:(i + 1) * 3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')
    print()

# Check for available moves
def is_moves_left(board):
    return ' ' in board

# Evaluate the board state
def evaluate(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]

    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]]:
            if board[combo[0]] == 'O':
                return 10
            elif board[combo[0]] == 'X':
                return -10
    return 0

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_max, alpha, beta):
    score = evaluate(board)

    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                best = max(best, minimax(board, depth + 1, not is_max, alpha, beta))
                board[i] = ' '
                alpha = max(alpha, best)
                if beta <= alpha:
                    break
        return best
    else:
        best = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                best = min(best, minimax(board, depth + 1, not is_max, alpha, beta))
                board[i] = ' '
                beta = min(beta, best)
                if beta <= alpha:
                    break
        return best

# Find the best move for the AI
def find_best_move(board):
    best_val = -math.inf
    best_move = -1

    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            move_val = minimax(board, 0, False, -math.inf, math.inf)
            board[i] = ' '
            if move_val > best_val:
                best_move = i
                best_val = move_val

    return best_move

# Check for a winner
def check_winner(board, player):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]

    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# Main game loop
def main():
    board = [' ' for _ in range(9)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while is_moves_left(board) and not check_winner(board, 'X') and not check_winner(board, 'O'):
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'X'
            print_board(board)
            if not is_moves_left(board) or check_winner(board, 'X'):
                break
            best_move = find_best_move(board)
            board[best_move] = 'O'
            print_board(board)
        else:
            print("Invalid move. Try again.")

    if check_winner(board, 'X'):
        print("You win!")
    elif check_winner(board, 'O'):
        print("AI wins!")
    else:
        print("It's a tie!")

if __name__ == "__main__":
    main()
